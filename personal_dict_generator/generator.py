import time
import sys
import itertools

class Generator():

	def __init__(self, name, template=".\\templates\\default.txt"):
		self.name = name
		self.template = template
		self.load_template()
		self.generate_passwords()

	def load_template(self):
		with open(self.template) as f:
			lines = f.read().splitlines()
		self.rules=[]
		for line in lines:
			if(len(line)>3 and line[0] is not "#"):
				self.rules.append(line)

	def generate_passwords(self):
		self.passwords=[]
		for rule in self.rules:
			print("[+] APPLIYING RULE '"+str(rule)+"'")
			self.passwords = self.passwords + self.process_rule(rule)
		self.passwords = set(list(self.passwords))

	def process_rule(self, rule):
		res=[""]
		#REPLACEMENTS
		rule = rule.replace("$name$", self.name)

		#procedural generation
		procedural_rules = []
		if("[" in rule):
			aux_split = rule.split("]")
			for a in aux_split:
				for i in a.split("["):
					if(len(i)>0): procedural_rules.append(i)

			aux_p_r = {}
			count = 0
			for p_r in procedural_rules:
				this_p_r = []
				this_p_r_done = False

				if("-" in p_r and not "," in p_r and not this_p_r_done): 
					this_p_r=self.range_rule(p_r)
					this_p_r_done=True

				if("," in p_r and not this_p_r_done): 
					this_p_r=self.list_rule(p_r)
					this_p_r_done=True

				if(not this_p_r_done):
					this_p_r = self.string_rule(p_r)

				aux_p_r["l"+str(count)]=this_p_r
				count+=1

			count = 0
			continue_rule = True
			final_rule_res = res
			while(continue_rule):
				try:
					if(aux_p_r["l"+str(count)]):
						final_rule_res=self.combine_posiblities(final_rule_res,aux_p_r["l"+str(count)])
				except:
					continue_rule=False
				count+=1

		else:
			final_rule_res = self.string_rule(rule)

		print("[+] Generated by rule: "+str(len(list(set(final_rule_res)))))
		print("[+] Sample: "+str(list(set(final_rule_res))[0:10]))
		return list(set(final_rule_res))

	def combine_posiblities(self, list1, list2):
		res = []
		for l1 in list1:
			for l2 in list2:
				res.append(str(l1)+str(l2))
		return res

	def string_rule(self, p_r):
		res = []
		res.append(p_r)
		if(p_r.lower() not in res): res.append(p_r.lower())
		if(p_r.title() not in res): res.append(p_r.title())
		return list(set(res))

	def range_rule(self, p_r):
		r = p_r.split("-")
		res=[]
		if(len(r[0])==2):
			for i in range(int(r[0]), int(r[1])+1):
				if(len(str(i))>1): res.append(i)
				else: res.append("0"+str(i))
		else:
			res = range(int(r[0]), int(r[1])+1)
		return res

	def list_rule(self, p_r):
		res=[]
		for p in p_r.split(","):
			res=res+self.string_rule(p)
		return list(set(res))

start_time = time.time()
if(len(sys.argv)==3):
	gen = Generator(sys.argv[1], sys.argv[2])
else:
	gen = Generator(sys.argv[1])

filename = '.\\dictionaries\\'+gen.name+"_"+gen.template.split("\\")[-1].replace(".txt", "")+"_"+str(len(gen.passwords))+'.txt'
with open(filename, 'w') as f:
    for item in gen.passwords:
        f.write("%s\n" % item)
print("Generated "+str(len(gen.passwords)) + " passwords in "+str((time.time() - start_time)) + " in file " +filename)
